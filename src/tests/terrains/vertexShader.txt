#version 300 es

in vec3 coordinate;
in vec2 textureCoord;
in vec3 normal;

out vec2 passedTextureCoord;
out vec2 tiledCoords;
out vec3 surfaceNormal;
out vec3 unitLightVector;
out vec3 unitCameraVector;
out float visibility;

uniform mat4 transformationMatrix;
uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform vec3 lightPosition;

const float density = 0.0035;
const float gradient = 5.0;

void main() {
    vec4 worldPosition = transformationMatrix * vec4(coordinate, 1.0);
    vec4 positionRelativeToCamera = viewMatrix * worldPosition;
    gl_Position = projectionMatrix * positionRelativeToCamera;

    passedTextureCoord = textureCoord;
    tiledCoords = passedTextureCoord * 40.0;

    surfaceNormal = (transformationMatrix * vec4(normal, 0.0)).xyz;
    unitLightVector = normalize(lightPosition - worldPosition.xyz);
    unitCameraVector = normalize((inverse(viewMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - worldPosition.xyz);

    float distance = length(positionRelativeToCamera.xyz);
    visibility = exp(-pow(distance * density, gradient));
}