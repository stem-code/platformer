#version 300 es

    precision mediump float;

in vec2 passedTextureCoord;
in vec3 surfaceNormal;
in vec3 unitLightVector;
in vec3 unitCameraVector;
in float visibility;

out vec4 fragColor;

uniform sampler2D textureSampler;
uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 fogColor;

void main() {
    vec3 unitNormal = normalize(surfaceNormal);
    float dotProduct = dot(unitNormal, unitLightVector);
    float brightness = max(dotProduct, 0.2);
    vec3 diffuse = brightness * lightColor;

    vec3 lightDirection = -unitLightVector;
    vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
    float specular = dot(reflectedLightDirection, unitCameraVector);
    specular = max(specular, 0.0);
    float dampenedSpecular = pow(specular, shineDamper);
    vec3 finalSpecular = dampenedSpecular * reflectivity * lightColor;

    vec4 textureColor = texture(textureSampler, passedTextureCoord);
    if (textureColor.a < 0.5) {
        discard;
    }

    fragColor = vec4(diffuse, 1.0) * textureColor + vec4(finalSpecular, 1.0);
    fragColor = mix(vec4(fogColor, 1.0), fragColor, visibility);
}