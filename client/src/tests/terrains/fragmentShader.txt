#version 300 es

precision mediump float;

in vec2 passedTextureCoord;
in vec2 tiledCoords;
in vec3 surfaceNormal;
in vec3 unitLightVector;
in vec3 unitCameraVector;
in float visibility;

out vec4 fragColor;

uniform sampler2D defaultTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;
uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 fogColor;

void main() {
    vec4 blendMapColor = texture(blendMap, passedTextureCoord);
    float defaultTextureAmount = 1.0 - (blendMapColor.r + blendMapColor.g + blendMapColor.b);
    vec4 defaultTextureColor = texture(defaultTexture, tiledCoords) * defaultTextureAmount;
    vec4 rTextureColor = texture(rTexture, tiledCoords) * blendMapColor.r;
    vec4 gTextureColor = texture(gTexture, tiledCoords) * blendMapColor.g;
    vec4 bTextureColor = texture(bTexture, tiledCoords) * blendMapColor.b;
    vec4 finalTextureColor = defaultTextureColor + rTextureColor + gTextureColor + bTextureColor;

    vec3 unitNormal = normalize(surfaceNormal);
    float dotProduct = dot(unitNormal, unitLightVector);
    float brightness = max(dotProduct, 0.2);
    vec3 diffuse = brightness * lightColor;

    vec3 lightDirection = -unitLightVector;
    vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
    float specular = dot(reflectedLightDirection, unitCameraVector);
    specular = max(specular, 0.0);
    float dampenedSpecular = pow(specular, shineDamper);
    vec3 finalSpecular = dampenedSpecular * reflectivity * lightColor;

    fragColor = vec4(diffuse, 1.0) * finalTextureColor + vec4(finalSpecular, 1.0);
    fragColor = mix(vec4(fogColor, 1.0), fragColor, visibility);
}